{
    "collab_server" : "",
    "contents" : "\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(stringi)\nlibrary(stringr)\nlibrary(inputAnnotate)\nlibrary(dygraphs)\nlibrary(xts)\nlibrary(DT)\nlibrary(data.tree)\nlibrary(TaxonomyTree)\nlibrary(networkD3)\nlibrary(jobqueue)\nlibrary(shinyTree)\nlibrary(magrittr)\nlibrary(htmlwidgets)\n#library(sunburstR)\nlibrary(googleVis)\nlibrary(ggplot2)\nlibrary(memoise)\n#library(RSQLite)\nlibrary(scales)\nlibrary(ggmap)\nlibrary(lubridate)\n\n#NLP Libraries\nlibrary(rJava)\nlibrary(NLP)\nlibrary(openNLP)\n#' TDM with n gram tokenizer doens work if RWeka is library is loaded use with scope resolution\n# library(RWeka)\nlibrary(openNLPmodels.en)\nlibrary(tm)\nlibrary(text2vec)\nlibrary(parallel)\nlibrary(pivottabler)\n#library(graphTweets)\nlibrary(visNetwork)\nlibrary(sentimentAnalysis)\n#library(tidyverse)\nlibrary(text2vec)\n#library(caret)\nlibrary(glmnet)\n#library(ggrepel)\nlibrary(purrrlyr)\nlibrary(rCharts)\nlibrary(rjson)\nlibrary(plotly)\n\nrm(list=ls())\n\noptions(encoding = 'utf-8')\n#######################################################################################\n###################################1. Extract Twitter messages#########################\n#######################################################################################\n\n# Install and load packages to retrieve network data from Twitter\nif (!require(\"httr\")) install.packages(\"httr\") ; require(\"httr\")\nif (!require(\"twitteR\")) install.packages(\"twitteR\") ; require(\"twitteR\")\n\n#' Flag to enable / disable Twitter fetch and web scrapping using Selenium. FALSE is disabled\nflag <- FALSE\n\n#' Flag to invalidate LDA topic reactive element. TRUE mean it will invalidate after every X seconds\n#' and reevaluate the expression\n# invalidate.flag <- TRUE\n\n\nsource(\"lib/helpe.R\")\nsource(\"lib/sentimentanalysis.R\")\nsource(\"lib/ms_people_scrape.R\")\nsource(\"lib/topicModeling.R\")\nsource(\"lib/asyncProcessor.R\")\nsource(\"lib/wordSuggestions.R\")\nsource(\"lib/taxonomyMatrix.R\")\n# Setup Twitter authorization\n\nif(TRUE) {\n  setup_twitter_oauth(consumer_key='1b8sIKPv3yYjXteh8UW4BCYaZ',\n                      consumer_secret='dUTMMhAoMDAsjABDq0NoUQasFeAkFZ1Q7RPJqfzligZw8bMrIF',\n                      access_token='3091224267-svuyKLlhEFuwE8eOTkcpZqyKUuFz24aayr6wIa0',\n                      access_secret='YvHamKBCkkN5FAPiNkFkQNe04jkYF0q60tR66rHmhafXj')\n}\n\n\n#' GLOBAL Full comments DF\nglobal.comments.df <- NULL\n\n\n# setup SQLite db\n# sqlite    <- dbDriver(\"SQLite\")\n# exampledb <- dbConnect(sqlite,\"newexample.db\")\n# \n# register_sqlite_backend(\"newexample.db\")\n\n\n# [1] \"Using direct authentication\"\n# Use a local file to cache OAuth access credentials between R sessions?\n# 1: Yes\n# 2: No\n#\n# Selection: N\n# Enter an item from the menu, or 0 to exit\n# Selection: 0\n\nroot.name <- \"Taxonomy\"\n\ntax.data.tree <- Node$new(root.name)\n\navailableTrendLocs <- twitteR::availableTrendLocations()\n\n###############################################################################################\n# javascript functions that handle updating.\n# changeTree will change the nodes of the tree but it does not care about\n# the state data provided with the json input. I use the next two functions to\n# force all nodes to open and unselect them all. It should be possible to \n# deal with individual nodes but I didn't get into that.\njavaScript = \"shinyjs.changeTree = function(params){\neval(\\\"$('#tree').jstree(true).settings.core.data=\\\"+params);\n$('#tree').jstree(true).refresh();\n}\nshinyjs.open = function(){\n//$('#tree').jstree(true).open_all();\n$('#tree').jstree(true).find('.jstree-open').open_node();\n\n}\nshinyjs.deselect = function(){\n$('#tree').jstree(true).deselect_all();\n}\"\n\n##############################################################################################\n\n############## - set up annotators for NLP entity extraction #################################\nword_ann <- Maxent_Word_Token_Annotator()\nsent_ann <- Maxent_Sent_Token_Annotator()\n\n############# - load file selector input names -##############################################\ncolumnnames <- c(\"ID\", \"comment\", \"datecreated\", \"longitude\", \"latitude\", \"user\")\n\n############# - NA Patters to ignore while reding text file - ################################\nna.patterns <- \"#REF!|#N/A|\\\\(blank\\\\)\"\n\n\n############# - Phantom JS Binary Path location - ############################################\nphantomjs.binary.path <- \"/Users/sid/Projects/utils/phantomjs/bin/phantomjs\"\n\n############# - Facebook Token - #############################################################\naccesstoken = \"EAACEdEose0cBAH1oCOvZBJLkTkkLlM6Sq8zDUwEVGWdIQZBEbtBthoNl6I5GfIWcIkKNG5jI2wBrCDJ8fGMV14J0wbq1ge8Qx2hz0q9YiY9dBjCFmg4tx2OHJ8G524yDTOVGdIGNyU1xxoXy5ZAabQoSgZCLK0onNQC9aMch1QZDZD\"\n\n#\\options(RCurloptions = list(verbose=FALSE, capath=system.file(\"CurlSSL\",\"cacert.pem\",package=\"RCurl\"),ssl.verifypeer = FALSE))\n\nnon.zero.df <- NULL\n\n############# - Global Pivot Table - #########################################################\npt <- PivotTable$new()\n\n############# = User Netwoork Nodes - #################################################################\nnetwork.nodes.df <- NULL\n\nsent_df_global <- NULL\n\n############## - Global wide df - ##################################################################\ndoc.tax.wide.df <- NULL\n\n",
    "created" : 1501937135821.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2581839966",
    "id" : "320B31C8",
    "lastKnownWriteTime" : 1501937109,
    "last_content_update" : 1501937109,
    "path" : "~/twittermkt/global.R",
    "project_path" : "global.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}